<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CS61A（一）</title>
      <link href="/2025/05/13/CS61A%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/05/13/CS61A%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1-函数作为抽象工具"><a href="#1-函数作为抽象工具" class="headerlink" title="1. 函数作为抽象工具"></a>1. 函数作为抽象工具</h2><p>函数的一个重要特性是它们可以作为抽象工具，隐藏实现细节。这意味着你可以定义一个函数，而不需要关心它的具体实现，只要知道它的输入和输出即可。<br>这也是cs61a的核心</p><p><strong>纯函数（Pure functions）</strong>：函数有一些输入（参数）并返回一些输出（调用返回结果）。不改变输出性质，如数学函数<br><strong>非纯函数（Non-pure functions）</strong>：除了返回值外，调用一个非纯函数还会产生其他改变解释器和计算机的状态的副作用（side effect）。如print()，输出其实是none，副产物是显示了你的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>),<span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>))<br><span class="hljs-number">1.2</span><br>none,none<br></code></pre></td></tr></table></figure><p>由此，<code>print</code> 函数返回 <code>None</code>  意味着它不应该用于赋值语句，不能使用嵌套。</p><p>实现函数的一个细节就是，实现者为函数的形参选择的名称不应该影响函数行为。所以，以下函数应该提供相同的行为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> mul(x, x)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">y</span>):<br>    <span class="hljs-keyword">return</span> mul(y, y)<br></code></pre></td></tr></table></figure><p>一个函数的含义应该与编写者选择的<code>参数</code>名称无关，这个原则对编程语言有重要的意义。最简单的就是函数的参数名称必须在保持函数体局部范围内。</p><h2 id="2-语句与表达式"><a href="#2-语句与表达式" class="headerlink" title="2. 语句与表达式"></a>2. 语句与表达式</h2><p>在 Python 中，语句和表达式是两种不同的概念。表达式是有值的，例如 <code>2 + 2</code> 或 <code>x * y</code>，它们可以被求值并返回一个结果。而语句则是用来执行某些操作的，它们没有值，但会改变程序的状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">10</span>  <span class="hljs-comment"># 赋值语句</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">x</span>):  <span class="hljs-comment"># def 语句</span><br>    <span class="hljs-keyword">return</span> x * x  <span class="hljs-comment"># return 语句</span><br></code></pre></td></tr></table></figure><p>语句的作用是执行某些操作，而不是返回一个值。例如，赋值语句会将一个值绑定到一个变量上，<code>def</code> 语句会定义一个函数，而 <code>return</code> 语句会从函数中返回一个值。</p><p>复合语句是由多个语句组成的结构，它们通常跨越多行，以单行头部开始，并以冒号结尾。复合语句的头部定义了语句的类型，而缩进的句体则包含了要执行的语句。条件语句（if，else）与while是最典型的复合语句</p><h2 id="3-函数调用与环境模型"><a href="#3-函数调用与环境模型" class="headerlink" title="3. 函数调用与环境模型"></a>3. 函数调用与环境模型</h2><p>调用一个函数时，Python 会创建一个新的局部环境（或称为帧），在这个环境中，函数的参数被绑定到传递给函数的实际值上。函数体中的代码在这个局部环境中执行，这意味着函数内部的变量不会影响外部的变量。</p><p>例如，调用 <code>square(4)</code> 时，Python 会创建一个新的局部帧，将参数 <code>x</code> 绑定到值 <code>4</code>，然后执行 <code>return x * x</code>，最终返回 <code>16</code>。</p><p>这种环境模型确保了函数的局部性，使得函数的实现细节对外部代码透明。每个函数调用都有自己的局部帧，即使多次调用同一个函数，每次调用都有独立的局部帧。</p><h2 id="4-局部变量与全局变量"><a href="#4-局部变量与全局变量" class="headerlink" title="4. 局部变量与全局变量"></a>4. 局部变量与全局变量</h2><p>在函数内部定义的变量称为局部变量，它们只在函数的局部帧中有效。与之相对的是全局变量，它们在全局帧中定义，可以在任何地方访问，但不能在函数内部直接修改，除非明确声明。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">10</span>  <span class="hljs-comment"># 全局变量</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    x = <span class="hljs-number">20</span>  <span class="hljs-comment"># 局部变量</span><br>    <span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># 输出 20</span><br><br>func()<br><span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># 输出 10</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>func</code> 内部的 <code>x</code> 是局部变量，不会影响全局变量 <code>x</code></p><h2 id="5-函数调用"><a href="#5-函数调用" class="headerlink" title="5. 函数调用"></a>5. 函数调用</h2><p>模块导入的两种常见方式——<code>import math</code> 和 <code>from math import sqrt</code>  </p><p><code>import math</code>：隔离的命名空间</p><ul><li><p>将整个 <code>math</code> 模块导入，但模块内的函数&#x2F;变量需通过 <code>math.</code> 访问。可以有效避免命名冲突<br><code>from math import sqrt</code>：扁平化到全局作用域</p></li><li><p>将 <code>sqrt</code> 函数直接注入当前全局作用域，可直接调用（如 <code>sqrt()</code>）。</p></li></ul><h2 id="6-参数默认值"><a href="#6-参数默认值" class="headerlink" title="6. 参数默认值"></a>6. 参数默认值</h2><p>定义通用函数的结果是引入了额外的参数。具有许多参数的函数可能调用起来很麻烦并且难以阅读。</p><p>在 Python 中，我们可以为函数的参数提供默认值。当调用该函数时，具有默认值的参数是可选的。如果未提供，则将默认值绑定到形参上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pressure</span>(<span class="hljs-params">v, t, n=<span class="hljs-number">6.022e23</span></span>):<br><span class="hljs-string">&quot;&quot;&quot;计算理想气体的压力，单位为帕斯卡 使用理想气体定律：</span><br><span class="hljs-string">v -- 气体体积，单位为立方米 </span><br><span class="hljs-string">t -- 绝对温度，单位为开尔文</span><br><span class="hljs-string">n -- 气体粒子，默认为一摩尔 &quot;&quot;&quot;</span> <br>k = <span class="hljs-number">1.38e-23</span> <br><span class="hljs-comment"># 玻尔兹曼常数 return n * k * t / v</span><br></code></pre></td></tr></table></figure><p><code>=</code> 符号在此示例中表示两种不同的含义，具体取决于使用它的上下文。在 def 语句中，<code>=</code> 不执行赋值，而是指示调用 <code>pressure</code> 函数时使用的默认值。相比之下，函数体中对 <code>k</code> 的赋值语句中将名称 <code>k</code> 与玻尔兹曼常数的近似值进行了绑定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>pressure(<span class="hljs-number">1</span>, <span class="hljs-number">273.15</span>)<br><span class="hljs-number">2269.974834</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pressure(<span class="hljs-number">1</span>, <span class="hljs-number">273.15</span>, <span class="hljs-number">3</span> * <span class="hljs-number">6.022e23</span>)<br><span class="hljs-number">6809.924502</span><br></code></pre></td></tr></table></figure><p><code>pressure</code> 函数的定义接收三个参数，但上面的第一个调用表达式中只提供了两个。在这种情况下，<code>n</code> 的值取自 <code>def</code> 语句中的默认值。如果提供了第三个参数，默认值将被忽略。</p><h2 id="7-测试"><a href="#7-测试" class="headerlink" title="7. 测试"></a>7. 测试</h2><p>测试是验证程序正确性的重要手段。在 Python 中，我们可以使用 <code>assert</code> 语句来验证函数的输出是否符合预期。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x * x<br><br><span class="hljs-keyword">assert</span> square(<span class="hljs-number">2</span>) == <span class="hljs-number">4</span>, <span class="hljs-string">&quot;square(2) 应该返回 4&quot;</span><br></code></pre></td></tr></table></figure><p>如果 <code>assert</code> 语句中的表达式为真，则程序继续执行；如果为假，则程序会抛出一个错误，并显示指定的错误信息。</p><p>除了 <code>assert</code> 语句，Python 还提供了 <code>doctest</code> 模块，用于编写和运行文档测试。文档测试允许我们将测试用例直接写在函数的文档字符串中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_naturals</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;返回前 n 个自然数的和。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; sum_naturals(10)</span><br><span class="hljs-string">    55</span><br><span class="hljs-string">    &gt;&gt;&gt; sum_naturals(100)</span><br><span class="hljs-string">    5050</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    total, k = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> k &lt;= n:<br>        total, k = total + k, k + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> total<br></code></pre></td></tr></table></figure><p>通过 <code>doctest</code> 模块，我们可以运行这些测试用例，验证函数的正确性，后面的作业检测用这个很多。</p><h2 id="8-高阶函数"><a href="#8-高阶函数" class="headerlink" title="8. 高阶函数"></a>8. 高阶函数</h2><p>高阶函数（Higher-Order Functions）是函数式编程中的一个重要概念。它们可以接受其他函数作为参数，或者返回函数作为结果。这种特性使得高阶函数能够将通用的编程模式抽象化，从而提高代码的复用性和可读性。<br>以下是作为参数传递：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">summation</span>(<span class="hljs-params">n, term</span>):<br>    total, k = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> k &lt;= n:<br>        total, k = total + term(k), k + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> total<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">identity</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cube</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x * x * x<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pi_term</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">8</span> / ((<span class="hljs-number">4</span> * x - <span class="hljs-number">3</span>) * (<span class="hljs-number">4</span> * x - <span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_naturals</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> summation(n, identity)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_cubes</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> summation(n, cube)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pi_sum</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> summation(n, pi_term)<br></code></pre></td></tr></table></figure><p>高阶函数不仅可以作为参数传递，还可以作为通用方法来表达复杂的计算逻辑。例如，我们可以定义一个通用的迭代改进算法 <code>improve</code>，它接受两个函数作为参数：一个更新函数 <code>update</code> 和一个检查函数 <code>close</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">improve</span>(<span class="hljs-params">update, close, guess=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> close(guess):<br>        guess = update(guess)<br>    <span class="hljs-keyword">return</span> guess<br></code></pre></td></tr></table></figure><p>通过这种方式，我们可以用 <code>improve</code> 函数来实现计算黄金比例的算法： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">golden_update</span>(<span class="hljs-params">guess</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / guess + <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">square_close_to_successor</span>(<span class="hljs-params">guess</span>):<br>    <span class="hljs-keyword">return</span> approx_eq(guess * guess, guess + <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">approx_eq</span>(<span class="hljs-params">x, y, tolerance=<span class="hljs-number">1e-15</span></span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(x - y) &lt; tolerance<br><br>phi = improve(golden_update, square_close_to_successor)<br></code></pre></td></tr></table></figure><h2 id="9-柯里化："><a href="#9-柯里化：" class="headerlink" title="9. 柯里化："></a>9. <strong>柯里化</strong>：</h2><p>强制逐参数分解，如 <code>f(a)(b)(c)</code>。<br>def嵌套可以让全局帧更明朗，不至于混乱，更好的来维护全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">curry2</span>(<span class="hljs-params">f</span>): <span class="hljs-string">&quot;&quot;&quot;返回给定的双参数函数的柯里化版本&quot;&quot;&quot;</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">g</span>(<span class="hljs-params">x</span>): <br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">h</span>(<span class="hljs-params">y</span>):<br>         <span class="hljs-keyword">return</span> f(x, y)<br>        <span class="hljs-keyword">return</span> h<br>    <span class="hljs-keyword">return</span> g<br><br></code></pre></td></tr></table></figure><p>柯里化可以这样看：f(x)(y)&#x3D;(f(x))(y),</p><p><code>curry2</code> 函数接受一个双参数函数 <code>f</code> 并返回一个单参数函数 <code>g</code>。当 <code>g</code> 应用于参数 <code>x</code> 时，它返回一个单参数函数 <code>h</code>。当 <code>h</code> 应用于参数 <code>y</code> 时，它调用 <code>f(x, y)</code>。因此，<code>curry2(f)(x)(y)</code> 等价于 <code>f(x, y)</code></p><h2 id="10-匿名函数lambda"><a href="#10-匿名函数lambda" class="headerlink" title="10.  匿名函数lambda"></a>10.  匿名函数lambda</h2><p>一个 lambda 表达式的计算结果是一个函数，它仅有一个返回表达式作为主体。不允许使用赋值和控制语句。匿名函数，使用方法相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><br> s = <span class="hljs-keyword">lambda</span> x: x * x<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&lt;function &lt;<span class="hljs-keyword">lambda</span>&gt; at <span class="hljs-number">0xf3f490</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>s(<span class="hljs-number">12</span>)<br><span class="hljs-number">144</span><br></code></pre></td></tr></table></figure><h2 id="11-函数装饰器"><a href="#11-函数装饰器" class="headerlink" title="11. 函数装饰器"></a>11. 函数装饰器</h2><p>函数装饰器（Decorator）是一种特殊的语法，用于在定义函数时应用高阶函数。装饰器可以用来扩展函数的功能，而不需要修改函数的定义。</p><p>例如，我们可以定义一个 <code>trace</code> 装饰器来追踪函数的调用，这也是我目前看到过的用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">trace</span>(<span class="hljs-params">fn</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapped</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&gt; &#x27;</span>, fn, <span class="hljs-string">&#x27;(&#x27;</span>, x, <span class="hljs-string">&#x27;)&#x27;</span>)<br>        <span class="hljs-keyword">return</span> fn(x)<br>    <span class="hljs-keyword">return</span> wrapped<br><br><span class="hljs-meta">@trace</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">triple</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> * x<br></code></pre></td></tr></table></figure><p>通过这种方式，我们可以用 <code>trace</code> 装饰器来追踪 <code>triple</code> 函数的调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">triple(<span class="hljs-number">12</span>)  <span class="hljs-comment"># 输出 -&gt;  &lt;function triple at 0x102a39848&gt; ( 12 ) 和 36</span><br></code></pre></td></tr></table></figure><h2 id="12-递归函数"><a href="#12-递归函数" class="headerlink" title="12. 递归函数"></a>12. 递归函数</h2><p>递归函数是一种在其函数体中直接或间接调用自身的函数。递归函数的关键在于能够将一个复杂的问题分解为更简单的问题，直到问题变得足够简单可以直接解决。这种分解过程通常被称为“递归分解”。</p><p>如：计算一个正整数的所有数字位之和。例如，数字 18117 的数字位之和是 1 + 8 + 1 + 1 + 7 &#x3D; 18。我们可以使用递归函数来实现这一功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_digits</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;返回正整数 n 的所有数字位之和&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">10</span>:<br>        <span class="hljs-keyword">return</span> n<br>    <span class="hljs-keyword">else</span>:<br>        all_but_last, last = n // <span class="hljs-number">10</span>, n % <span class="hljs-number">10</span><br>        <span class="hljs-keyword">return</span> sum_digits(all_but_last) + last<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>sum_digits</code> 函数将问题分解为两部分：<br> 最后一位数字 <code>n % 10</code>。足够简单，即基线条件<br>  除最后一位以外的所有数字的和 <code>sum_digits(n // 10)</code>。</p><p>递归函数通常具有以下结构：<br><strong>基线条件</strong>：定义了最简单的情况，直接返回结果。<br><strong>递归调用</strong>：将问题分解为更简单的问题，并调用自身来解决这些子问题。</p><h2 id="13-树递归"><a href="#13-树递归" class="headerlink" title="13. 树递归"></a>13. 树递归</h2><p>树递归是指一个函数在每次调用时会生成多个递归调用。这种模式在解决某些问题时非常自然和直观。例如，计算斐波那契数列的递归实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">elif</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> fib(n - <span class="hljs-number">1</span>) + fib(n - <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>fib(n)</code> 会生成两个递归调用 <code>fib(n - 1)</code> 和 <code>fib(n - 2)</code>。这种树递归的结构使得问题的分解非常直观，但可能会导致大量的重复计算。这个可能需要先看看树那一节才能更好理解了。</p><h2 id="14-分割数"><a href="#14-分割数" class="headerlink" title="14. 分割数"></a>14. 分割数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_partitions</span>(<span class="hljs-params">n, m</span>):   <br><span class="hljs-string">&quot;&quot;&quot;计算使用最大数 m 的整数分割 n 的方式的数量&quot;&quot;&quot;</span>     <br><span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>     <br><span class="hljs-keyword">elif</span> n &lt; <span class="hljs-number">0</span>:     <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>     <br><span class="hljs-keyword">elif</span> m == <span class="hljs-number">0</span>: <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>    <br> <span class="hljs-keyword">else</span>:     <br>     <span class="hljs-keyword">return</span> count_partitions(n-m, m) + count_partitions(n, m-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>使用最大数为 m 的整数分割 n 的方式的数量等于</p><ol><li>使用最大数为 m 的整数分割 n-m 的方式的数量，加上&#x2F;&#x2F;即，存在一个m，继续分割，这个直到n-m-m-m….每一次减就是一层，直到小于m，这个分之就变成余数被m-1分割……（即2的情况）</li><li>使用最大数为 m-1 的整数分割 n 的方式的数量，递归，直到变成最小，不是最小就回到1的情况分割<br>分割(6,4)<br>即包含4和不包含4的，不包含4的再分成包含3和不包含3的……</li></ol>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs61a </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THE FIRST BOLG</title>
      <link href="/2025/05/11/THE-FIRST-BOLG/"/>
      <url>/2025/05/11/THE-FIRST-BOLG/</url>
      
        <content type="html"><![CDATA[<p>今天是母亲节，先祝我的妈妈节日快乐吧~</p><h1 id="母亲节快乐，您辛苦了！"><a href="#母亲节快乐，您辛苦了！" class="headerlink" title="母亲节快乐，您辛苦了！"></a>母亲节快乐，您辛苦了！</h1><p>我想多一种方式来记录自己，也能方便你们以另一种方式了解我，所以我创建了这个博客。</p><h2 id="希望大家能够喜欢！！！"><a href="#希望大家能够喜欢！！！" class="headerlink" title="希望大家能够喜欢！！！"></a>希望大家能够喜欢！！！</h2><p>正如标签所说，这个博客更多会更新一些技术相关的思考，日常的一些随笔，与“二次元”相关的内容（这个表述就很宽泛了，哈哈哈）。<br><em>介绍一下自己（也是方便以后的回顾）</em><br>我是一名大一的本科生，热爱<strong>computer science</strong>的内容（可能起因是为了自己写游戏攻略而被迫接触逆向？？？），目前学习过<strong>cs50，cs61a</strong>和计算机视觉与目标检测等内容，才疏学浅，还需努力。<br>网站的图标是初音未来的玩偶（<strong>fufu</strong>），副标题出自亚托利，用户头像是<strong>zaurlane</strong>的<strong>helena</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 母亲节 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>这是一个关于，以后会补的<br>ciallo~</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
